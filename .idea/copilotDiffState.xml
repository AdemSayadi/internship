<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/front/src/views/CustomPages/Dashboard/EnhancedDashboard.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/front/src/views/CustomPages/Dashboard/EnhancedDashboard.vue" />
              <option name="updatedContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader &#10;            title=&quot;Code Review Dashboard&quot; &#10;            subtitle=&quot;Monitor your code review activity and performance metrics&quot; &#10;        /&gt;&#10;&#10;        &lt;!-- Quick Actions --&gt;&#10;        &lt;div class=&quot;mt-6 grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#10;            &lt;StyledButton &#10;                label=&quot;Add Repository&quot; &#10;                icon=&quot;plus&quot; &#10;                @click=&quot;$router.push('/repositories')&quot;&#10;                class=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;            /&gt;&#10;            &lt;StyledButton &#10;                label=&quot;Submit Code&quot; &#10;                icon=&quot;upload&quot; &#10;                @click=&quot;$router.push('/submissions')&quot;&#10;                class=&quot;bg-green-600 hover:bg-green-700&quot;&#10;            /&gt;&#10;            &lt;StyledButton &#10;                label=&quot;View Pull Requests&quot; &#10;                icon=&quot;git-merge&quot; &#10;                @click=&quot;$router.push('/pull-requests')&quot;&#10;                class=&quot;bg-purple-600 hover:bg-purple-700&quot;&#10;            /&gt;&#10;            &lt;StyledButton &#10;                label=&quot;Review History&quot; &#10;                icon=&quot;comments&quot; &#10;                @click=&quot;$router.push('/reviews')&quot;&#10;                class=&quot;bg-orange-600 hover:bg-orange-700&quot;&#10;            /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Statistics Overview --&gt;&#10;        &lt;div class=&quot;mt-8 grid grid-cols-1 md:grid-cols-4 gap-6&quot;&gt;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-blue-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-folder text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Repositories&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ stats.repositories || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-green-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-git-merge text-green-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Active PRs&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ stats.activePRs || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-purple-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-comments text-purple-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Reviews This Week&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ stats.weeklyReviews || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-orange-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-star text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Avg Score&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ stats.avgScore || 0 }}/10&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Recent Activity --&gt;&#10;        &lt;div class=&quot;mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;            &lt;!-- Recent Pull Requests --&gt;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow&quot;&gt;&#10;                &lt;div class=&quot;p-6 border-b&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold&quot;&gt;Recent Pull Requests&lt;/h3&gt;&#10;                        &lt;Button &#10;                            label=&quot;View All&quot; &#10;                            text &#10;                            @click=&quot;$router.push('/pull-requests')&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div v-if=&quot;recentPRs.length === 0&quot; class=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-git-merge text-2xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;p class=&quot;mt-2&quot;&gt;No recent pull requests&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div v-else class=&quot;space-y-4&quot;&gt;&#10;                        &lt;div &#10;                            v-for=&quot;pr in recentPRs.slice(0, 5)&quot; &#10;                            :key=&quot;pr.id&quot;&#10;                            class=&quot;flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 cursor-pointer&quot;&#10;                            @click=&quot;$router.push(`/pull-requests?repository_id=${pr.repository_id}`)&quot;&#10;                        &gt;&#10;                            &lt;div class=&quot;flex-1&quot;&gt;&#10;                                &lt;p class=&quot;font-medium text-gray-900&quot;&gt;{{ pr.title }}&lt;/p&gt;&#10;                                &lt;p class=&quot;text-sm text-gray-500&quot;&gt;{{ pr.repository.name }} • {{ formatDate(pr.created_at) }}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;Tag &#10;                                :value=&quot;pr.state&quot; &#10;                                :severity=&quot;getStateSeverity(pr.state)&quot;&#10;                                class=&quot;capitalize&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Recent Reviews --&gt;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow&quot;&gt;&#10;                &lt;div class=&quot;p-6 border-b&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;h3 class=&quot;text-lg font-semibold&quot;&gt;Recent Reviews&lt;/h3&gt;&#10;                        &lt;Button &#10;                            label=&quot;View All&quot; &#10;                            text &#10;                            @click=&quot;$router.push('/reviews')&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;p-6&quot;&gt;&#10;                    &lt;div v-if=&quot;recentReviews.length === 0&quot; class=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-comments text-2xl&quot;&gt;&lt;/i&gt;&#10;                        &lt;p class=&quot;mt-2&quot;&gt;No recent reviews&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div v-else class=&quot;space-y-4&quot;&gt;&#10;                        &lt;div &#10;                            v-for=&quot;review in recentReviews.slice(0, 5)&quot; &#10;                            :key=&quot;review.id&quot;&#10;                            class=&quot;flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50&quot;&#10;                        &gt;&#10;                            &lt;div class=&quot;flex-1&quot;&gt;&#10;                                &lt;p class=&quot;font-medium text-gray-900&quot;&gt;{{ review.submission?.title || review.pull_request?.title }}&lt;/p&gt;&#10;                                &lt;p class=&quot;text-sm text-gray-500&quot;&gt;&#10;                                    {{ review.review_type === 'ai_auto' ? 'AI Review' : 'Manual Review' }} • &#10;                                    {{ formatDate(review.created_at) }}&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span v-if=&quot;review.score&quot; class=&quot;text-sm font-medium&quot;&gt;{{ review.score }}/10&lt;/span&gt;&#10;                                &lt;Tag &#10;                                    :value=&quot;review.status&quot; &#10;                                    :severity=&quot;getReviewStatusSeverity(review.status)&quot;&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Quick Tips --&gt;&#10;        &lt;div class=&quot;mt-8 bg-blue-50 rounded-lg p-6&quot;&gt;&#10;            &lt;h3 class=&quot;text-lg font-semibold text-blue-900 mb-4&quot;&gt;Quick Tips&lt;/h3&gt;&#10;            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div class=&quot;flex items-start gap-3&quot;&gt;&#10;                    &lt;i class=&quot;pi pi-lightbulb text-blue-600 mt-1&quot;&gt;&lt;/i&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h4 class=&quot;font-medium text-blue-900&quot;&gt;Set up GitHub Integration&lt;/h4&gt;&#10;                        &lt;p class=&quot;text-sm text-blue-700&quot;&gt;Connect your GitHub account to automatically receive pull request reviews.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex items-start gap-3&quot;&gt;&#10;                    &lt;i class=&quot;pi pi-lightbulb text-blue-600 mt-1&quot;&gt;&lt;/i&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h4 class=&quot;font-medium text-blue-900&quot;&gt;Configure AI Review Settings&lt;/h4&gt;&#10;                        &lt;p class=&quot;text-sm text-blue-700&quot;&gt;Customize AI review criteria to match your coding standards.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { ref, onMounted } from 'vue';&#10;import { useRouter } from 'vue-router';&#10;import { useToast } from 'primevue/usetoast';&#10;import Button from 'primevue/button';&#10;import Tag from 'primevue/tag';&#10;import MainLayout from '@/components/CustomComponents/MainLayout.vue';&#10;import PageHeader from '@/components/CustomComponents/PageHeader.vue';&#10;import StyledButton from '@/components/CustomComponents/StyledButton.vue';&#10;import { useAuth } from '@/utils/composables/useAuth';&#10;&#10;// State&#10;const stats = ref({});&#10;const recentPRs = ref([]);&#10;const recentReviews = ref([]);&#10;const loading = ref(false);&#10;&#10;const router = useRouter();&#10;const toast = useToast();&#10;&#10;// API base URL&#10;const API_BASE = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';&#10;&#10;// Utility functions&#10;const getAuthHeaders = () =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (!token) {&#10;        router.push('/auth/login1');&#10;        return null;&#10;    }&#10;    return {&#10;        'Authorization': `Bearer ${token}`,&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;    };&#10;};&#10;&#10;const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric'&#10;    });&#10;};&#10;&#10;const getStateSeverity = (state) =&gt; {&#10;    switch (state) {&#10;        case 'open': return 'success';&#10;        case 'merged': return 'info';&#10;        case 'closed': return 'warning';&#10;        default: return 'secondary';&#10;    }&#10;};&#10;&#10;const getReviewStatusSeverity = (status) =&gt; {&#10;    switch (status) {&#10;        case 'completed': return 'success';&#10;        case 'pending': return 'warning';&#10;        case 'processing': return 'info';&#10;        case 'failed': return 'danger';&#10;        default: return 'secondary';&#10;    }&#10;};&#10;&#10;// API functions&#10;const fetchDashboardData = async () =&gt; {&#10;    try {&#10;        loading.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const [statsResponse, prsResponse, reviewsResponse] = await Promise.all([&#10;            fetch(`${API_BASE}/dashboard/stats`, { headers }),&#10;            fetch(`${API_BASE}/pull-requests?limit=5`, { headers }),&#10;            fetch(`${API_BASE}/reviews?limit=5`, { headers })&#10;        ]);&#10;&#10;        if (statsResponse.ok) {&#10;            const statsData = await statsResponse.json();&#10;            stats.value = statsData.stats || {};&#10;        }&#10;&#10;        if (prsResponse.ok) {&#10;            const prsData = await prsResponse.json();&#10;            recentPRs.value = prsData.pull_requests?.data || prsData.pull_requests || [];&#10;        }&#10;&#10;        if (reviewsResponse.ok) {&#10;            const reviewsData = await reviewsResponse.json();&#10;            recentReviews.value = reviewsData.reviews?.data || reviewsData.reviews || [];&#10;        }&#10;&#10;    } catch (error) {&#10;        console.error('Error fetching dashboard data:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to load dashboard data',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loading.value = false;&#10;    }&#10;};&#10;&#10;// Initialize&#10;const { checkAuth } = useAuth();&#10;&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;    await fetchDashboardData();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/front/src/views/CustomPages/PullRequests.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/front/src/views/CustomPages/PullRequests.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader&#10;            title=&quot;Pull Requests&quot;&#10;            :subtitle=&quot;`Manage pull requests ${repository ? 'for ' + repository.name : ''}`&quot;&#10;        /&gt;&#10;&#10;        &lt;!-- Filter Controls --&gt;&#10;        &lt;div class=&quot;mt-6 flex flex-wrap gap-4 items-center&quot;&gt;&#10;            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;label class=&quot;text-sm font-medium text-gray-700&quot;&gt;Repository:&lt;/label&gt;&#10;                &lt;Dropdown&#10;                    v-model=&quot;selectedRepositoryId&quot;&#10;                    :options=&quot;repositoryOptions&quot;&#10;                    optionLabel=&quot;label&quot;&#10;                    optionValue=&quot;value&quot;&#10;                    placeholder=&quot;All Repositories&quot;&#10;                    class=&quot;w-48&quot;&#10;                    @change=&quot;fetchPullRequests&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;label class=&quot;text-sm font-medium text-gray-700&quot;&gt;State:&lt;/label&gt;&#10;                &lt;Dropdown&#10;                    v-model=&quot;selectedState&quot;&#10;                    :options=&quot;stateOptions&quot;&#10;                    optionLabel=&quot;label&quot;&#10;                    optionValue=&quot;value&quot;&#10;                    placeholder=&quot;All States&quot;&#10;                    class=&quot;w-32&quot;&#10;                    @change=&quot;fetchPullRequests&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;Button&#10;                label=&quot;Refresh&quot;&#10;                icon=&quot;pi pi-refresh&quot;&#10;                @click=&quot;fetchPullRequests&quot;&#10;                :loading=&quot;loading&quot;&#10;                class=&quot;ml-auto&quot;&#10;            /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Statistics Cards --&gt;&#10;        &lt;div class=&quot;mt-6 grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-blue-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-git-merge text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Total PRs&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.total || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-green-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-check-circle text-green-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Open&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.open || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-purple-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-check text-purple-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Merged&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.merged || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                    &lt;div class=&quot;p-2 bg-orange-100 rounded-lg&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-eye text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Reviewed&lt;/p&gt;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.reviewed || 0 }}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Loading state --&gt;&#10;        &lt;div v-if=&quot;loading&quot; class=&quot;mt-8 text-center&quot;&gt;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading pull requests...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Empty state --&gt;&#10;        &lt;div v-else-if=&quot;pullRequests.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#10;            &lt;i class=&quot;pi pi-git-merge text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No pull requests found&lt;/h3&gt;&#10;            &lt;p class=&quot;mt-2 text-gray-500&quot;&gt;&#10;                {{ selectedState || selectedRepositoryId ? 'Try adjusting your filters' : 'Pull requests will appear here when GitHub webhooks are triggered' }}&#10;            &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Pull Requests Table --&gt;&#10;        &lt;DataTable&#10;            v-else&#10;            :value=&quot;pullRequests&quot;&#10;            class=&quot;mt-8&quot;&#10;            :paginator=&quot;true&quot;&#10;            :rows=&quot;15&quot;&#10;            :rowsPerPageOptions=&quot;[10, 15, 25]&quot;&#10;            sortMode=&quot;multiple&quot;&#10;        &gt;&#10;            &lt;Column field=&quot;title&quot; header=&quot;Title&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;a&#10;                            :href=&quot;slotProps.data.html_url&quot;&#10;                            target=&quot;_blank&quot;&#10;                            class=&quot;font-medium text-indigo-600 hover:text-indigo-900&quot;&#10;                        &gt;&#10;                            {{ slotProps.data.title }}&#10;                        &lt;/a&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-500&quot;&gt;&#10;                            #{{ slotProps.data.github_pr_number }}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column field=&quot;repository.name&quot; header=&quot;Repository&quot; sortable /&gt;&#10;&#10;            &lt;Column field=&quot;state&quot; header=&quot;State&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;Tag&#10;                        :value=&quot;slotProps.data.state&quot;&#10;                        :severity=&quot;getStateSeverity(slotProps.data.state)&quot;&#10;                        class=&quot;capitalize&quot;&#10;                    /&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column field=&quot;author_username&quot; header=&quot;Author&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;img&#10;                            v-if=&quot;slotProps.data.author_avatar_url&quot;&#10;                            :src=&quot;slotProps.data.author_avatar_url&quot;&#10;                            :alt=&quot;slotProps.data.author_username&quot;&#10;                            class=&quot;w-6 h-6 rounded-full&quot;&#10;                        &gt;&#10;                        &lt;span&gt;{{ slotProps.data.author_username }}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column field=&quot;head_branch&quot; header=&quot;Branch&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;code class=&quot;text-sm bg-gray-100 px-2 py-1 rounded&quot;&gt;&#10;                        {{ slotProps.data.head_branch }}&#10;                    &lt;/code&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column header=&quot;Reviews&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;span class=&quot;text-sm text-gray-600&quot;&gt;&#10;                            {{ slotProps.data.reviews?.length || 0 }} reviews&#10;                        &lt;/span&gt;&#10;                        &lt;Tag&#10;                            v-if=&quot;hasAiReview(slotProps.data.reviews)&quot;&#10;                            value=&quot;AI&quot;&#10;                            severity=&quot;info&quot;&#10;                            class=&quot;text-xs&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Created&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    {{ formatDate(slotProps.data.created_at) }}&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Reviews&quot;&#10;                            icon=&quot;pi pi-comments&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            @click=&quot;viewReviews(slotProps.data)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            v-if=&quot;slotProps.data.state === 'open'&quot;&#10;                            label=&quot;Trigger Review&quot;&#10;                            icon=&quot;pi pi-refresh&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            @click=&quot;triggerReview(slotProps.data)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;GitHub&quot;&#10;                            icon=&quot;pi pi-external-link&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            @click=&quot;() =&gt; window.open(slotProps.data.html_url, '_blank')&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;        &lt;/DataTable&gt;&#10;&#10;        &lt;!-- Review Details Dialog --&gt;&#10;        &lt;Dialog&#10;            v-model:visible=&quot;showReviewDialog&quot;&#10;            header=&quot;Pull Request Reviews&quot;&#10;            modal&#10;            class=&quot;w-full max-w-4xl&quot;&#10;        &gt;&#10;            &lt;div v-if=&quot;selectedPullRequest&quot; class=&quot;space-y-6&quot;&gt;&#10;                &lt;!-- PR Info --&gt;&#10;                &lt;div class=&quot;border-b pb-4&quot;&gt;&#10;                    &lt;h3 class=&quot;text-lg font-semibold&quot;&gt;{{ selectedPullRequest.title }}&lt;/h3&gt;&#10;                    &lt;p class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;                        PR #{{ selectedPullRequest.github_pr_number }} by {{ selectedPullRequest.author_username }}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Reviews List --&gt;&#10;                &lt;div v-if=&quot;selectedPullRequestReviews.length &gt; 0&quot; class=&quot;space-y-4&quot;&gt;&#10;                    &lt;h4 class=&quot;font-medium&quot;&gt;Reviews ({{ selectedPullRequestReviews.length }})&lt;/h4&gt;&#10;&#10;                    &lt;div&#10;                        v-for=&quot;review in selectedPullRequestReviews&quot;&#10;                        :key=&quot;review.id&quot;&#10;                        class=&quot;border rounded-lg p-4&quot;&#10;                    &gt;&#10;                        &lt;div class=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;                            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;Tag&#10;                                    :value=&quot;review.review_type === 'ai_auto' ? 'AI Review' : 'Manual Review'&quot;&#10;                                    :severity=&quot;review.review_type === 'ai_auto' ? 'info' : 'success'&quot;&#10;                                /&gt;&#10;                                &lt;Tag&#10;                                    :value=&quot;review.status&quot;&#10;                                    :severity=&quot;getReviewStatusSeverity(review.status)&quot;&#10;                                /&gt;&#10;                                &lt;span v-if=&quot;review.score&quot; class=&quot;text-sm font-medium&quot;&gt;&#10;                                    Score: {{ review.score }}/10&#10;                                &lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;span class=&quot;text-sm text-gray-500&quot;&gt;&#10;                                {{ formatDate(review.reviewed_at || review.created_at) }}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div v-if=&quot;review.summary&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;h5 class=&quot;font-medium mb-1&quot;&gt;Summary:&lt;/h5&gt;&#10;                            &lt;p class=&quot;text-sm text-gray-700&quot;&gt;{{ review.summary }}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div v-if=&quot;review.feedback&quot; class=&quot;mb-3&quot;&gt;&#10;                            &lt;h5 class=&quot;font-medium mb-1&quot;&gt;Detailed Feedback:&lt;/h5&gt;&#10;                            &lt;div class=&quot;text-sm text-gray-700 whitespace-pre-line bg-gray-50 p-3 rounded&quot;&gt;&#10;                                {{ review.feedback }}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Issues --&gt;&#10;                        &lt;div v-if=&quot;hasIssues(review)&quot; class=&quot;grid grid-cols-1 md:grid-cols-3 gap-4 mt-4&quot;&gt;&#10;                            &lt;div v-if=&quot;review.security_issues?.length&quot;&gt;&#10;                                &lt;h6 class=&quot;font-medium text-red-700 mb-2&quot;&gt;Security Issues&lt;/h6&gt;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#10;                                    &lt;div&#10;                                        v-for=&quot;issue in review.security_issues&quot;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#10;                                        class=&quot;text-xs bg-red-50 p-2 rounded&quot;&#10;                                    &gt;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div v-if=&quot;review.performance_issues?.length&quot;&gt;&#10;                                &lt;h6 class=&quot;font-medium text-yellow-700 mb-2&quot;&gt;Performance Issues&lt;/h6&gt;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#10;                                    &lt;div&#10;                                        v-for=&quot;issue in review.performance_issues&quot;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#10;                                        class=&quot;text-xs bg-yellow-50 p-2 rounded&quot;&#10;                                    &gt;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div v-if=&quot;review.code_quality_issues?.length&quot;&gt;&#10;                                &lt;h6 class=&quot;font-medium text-blue-700 mb-2&quot;&gt;Quality Issues&lt;/h6&gt;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#10;                                    &lt;div&#10;                                        v-for=&quot;issue in review.code_quality_issues&quot;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#10;                                        class=&quot;text-xs bg-blue-50 p-2 rounded&quot;&#10;                                    &gt;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Suggestions --&gt;&#10;                        &lt;div v-if=&quot;review.suggestions?.length&quot; class=&quot;mt-4&quot;&gt;&#10;                            &lt;h6 class=&quot;font-medium text-green-700 mb-2&quot;&gt;Suggestions&lt;/h6&gt;&#10;                            &lt;div class=&quot;space-y-1&quot;&gt;&#10;                                &lt;div&#10;                                    v-for=&quot;suggestion in review.suggestions&quot;&#10;                                    :key=&quot;suggestion.file + suggestion.suggestion&quot;&#10;                                    class=&quot;text-xs bg-green-50 p-2 rounded&quot;&#10;                                &gt;&#10;                                    &lt;strong&gt;{{ suggestion.file }}:&lt;/strong&gt; {{ suggestion.description }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div v-else class=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                    &lt;i class=&quot;pi pi-comments text-2xl&quot;&gt;&lt;/i&gt;&#10;                    &lt;p class=&quot;mt-2&quot;&gt;No reviews yet&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/Dialog&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { ref, onMounted, computed } from 'vue';&#10;import { useRouter } from 'vue-router';&#10;import { useToast } from 'primevue/usetoast';&#10;import Button from 'primevue/button';&#10;import Dialog from 'primevue/dialog';&#10;import DataTable from 'primevue/datatable';&#10;import Column from 'primevue/column';&#10;import Tag from 'primevue/tag';&#10;import Dropdown from 'primevue/dropdown';&#10;import MainLayout from '@/components/CustomComponents/MainLayout.vue';&#10;import PageHeader from '@/components/CustomComponents/PageHeader.vue';&#10;import { useAuth } from '@/utils/composables/useAuth';&#10;&#10;// State&#10;const loading = ref(false);&#10;const pullRequests = ref([]);&#10;const repositories = ref([]);&#10;const statistics = ref({});&#10;const selectedRepositoryId = ref(null);&#10;const selectedState = ref(null);&#10;const showReviewDialog = ref(false);&#10;const selectedPullRequest = ref(null);&#10;const selectedPullRequestReviews = ref([]);&#10;&#10;const router = useRouter();&#10;const toast = useToast();&#10;&#10;// API base URL&#10;const API_BASE = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';&#10;&#10;// Computed properties&#10;const repositoryOptions = computed(() =&gt; [&#10;    { label: 'All Repositories', value: null },&#10;    ...repositories.value.map(repo =&gt; ({&#10;        label: repo.name,&#10;        value: repo.id&#10;    }))&#10;]);&#10;&#10;const stateOptions = [&#10;    { label: 'All States', value: null },&#10;    { label: 'Open', value: 'open' },&#10;    { label: 'Closed', value: 'closed' },&#10;    { label: 'Merged', value: 'merged' }&#10;];&#10;&#10;// Utility functions&#10;const getAuthHeaders = () =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (!token) {&#10;        router.push('/auth/login1');&#10;        return null;&#10;    }&#10;    return {&#10;        'Authorization': `Bearer ${token}`,&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;    };&#10;};&#10;&#10;const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric',&#10;        hour: '2-digit',&#10;        minute: '2-digit'&#10;    });&#10;};&#10;&#10;const getStateSeverity = (state) =&gt; {&#10;    switch (state) {&#10;        case 'open': return 'success';&#10;        case 'merged': return 'info';&#10;        case 'closed': return 'warning';&#10;        default: return 'secondary';&#10;    }&#10;};&#10;&#10;const getReviewStatusSeverity = (status) =&gt; {&#10;    switch (status) {&#10;        case 'completed': return 'success';&#10;        case 'pending': return 'warning';&#10;        case 'processing': return 'info';&#10;        case 'failed': return 'danger';&#10;        default: return 'secondary';&#10;    }&#10;};&#10;&#10;const hasAiReview = (reviews) =&gt; {&#10;    return reviews?.some(review =&gt; review.review_type === 'ai_auto');&#10;};&#10;&#10;const hasIssues = (review) =&gt; {&#10;    return (review.security_issues?.length &gt; 0) ||&#10;        (review.performance_issues?.length &gt; 0) ||&#10;        (review.code_quality_issues?.length &gt; 0);&#10;};&#10;&#10;// API functions&#10;const fetchPullRequests = async () =&gt; {&#10;    try {&#10;        loading.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const params = new URLSearchParams();&#10;        if (selectedRepositoryId.value) params.append('repository_id', selectedRepositoryId.value);&#10;        if (selectedState.value) params.append('state', selectedState.value);&#10;&#10;        const url = `${API_BASE}/pull-requests${params.toString() ? '?' + params.toString() : ''}`;&#10;        const response = await fetch(url, { headers });&#10;&#10;        if (response.status === 401) {&#10;            localStorage.removeItem('token');&#10;            router.push('/auth/login1');&#10;            return;&#10;        }&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to fetch pull requests');&#10;        }&#10;&#10;        const data = await response.json();&#10;        pullRequests.value = data.pull_requests?.data || data.pull_requests || [];&#10;&#10;    } catch (error) {&#10;        console.error('Error fetching pull requests:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to load pull requests: ' + error.message,&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loading.value = false;&#10;    }&#10;};&#10;&#10;const fetchRepositories = async () =&gt; {&#10;    try {&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/repositories`, { headers });&#10;&#10;        if (response.ok) {&#10;            const data = await response.json();&#10;            repositories.value = data.repositories || [];&#10;        }&#10;    } catch (error) {&#10;        console.error('Error fetching repositories:', error);&#10;    }&#10;};&#10;&#10;const fetchStatistics = async () =&gt; {&#10;    try {&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/pull-requests/statistics`, { headers });&#10;&#10;        if (response.ok) {&#10;            const data = await response.json();&#10;            statistics.value = data.statistics || {};&#10;        }&#10;    } catch (error) {&#10;        console.error('Error fetching statistics:', error);&#10;    }&#10;};&#10;&#10;const viewReviews = async (pullRequest) =&gt; {&#10;    try {&#10;        selectedPullRequest.value = pullRequest;&#10;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/pull-requests/${pullRequest.id}/reviews`, { headers });&#10;&#10;        if (response.ok) {&#10;            const data = await response.json();&#10;            selectedPullRequestReviews.value = data.reviews || [];&#10;            showReviewDialog.value = true;&#10;        } else {&#10;            throw new Error('Failed to fetch reviews');&#10;        }&#10;    } catch (error) {&#10;        console.error('Error fetching reviews:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to load reviews: ' + error.message,&#10;            life: 5000,&#10;        });&#10;    }&#10;};&#10;&#10;const triggerReview = async (pullRequest) =&gt; {&#10;    try {&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/pull-requests/${pullRequest.id}/trigger-review`, {&#10;            method: 'POST',&#10;            headers&#10;        });&#10;&#10;        if (response.ok) {&#10;            toast.add({&#10;                severity: 'success',&#10;                summary: 'Success',&#10;                detail: 'Review triggered successfully',&#10;                life: 3000,&#10;            });&#10;&#10;            // Refresh the pull request data&#10;            await fetchPullRequests();&#10;        } else {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to trigger review');&#10;        }&#10;    } catch (error) {&#10;        console.error('Error triggering review:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to trigger review: ' + error.message,&#10;            life: 5000,&#10;        });&#10;    }&#10;};&#10;&#10;// Initialize&#10;const { checkAuth } = useAuth();&#10;//repository id&#10;&#10;&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;&#10;    await Promise.all([&#10;        fetchRepositories(),&#10;        fetchStatistics(),&#10;        fetchPullRequests()&#10;    ]);&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;    &lt;MainLayout&gt;&#13;&#10;        &lt;PageHeader&#13;&#10;            title=&quot;Pull Requests&quot;&#13;&#10;            :subtitle=&quot;`Manage pull requests ${repository ? 'for ' + repository.name : ''}`&quot;&#13;&#10;        /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Filter Controls --&gt;&#13;&#10;        &lt;div class=&quot;mt-6 flex flex-wrap gap-4 items-center&quot;&gt;&#13;&#10;            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                &lt;label class=&quot;text-sm font-medium text-gray-700&quot;&gt;Repository:&lt;/label&gt;&#13;&#10;                &lt;Dropdown&#13;&#10;                    v-model=&quot;selectedRepositoryId&quot;&#13;&#10;                    :options=&quot;repositoryOptions&quot;&#13;&#10;                    optionLabel=&quot;label&quot;&#13;&#10;                    optionValue=&quot;value&quot;&#13;&#10;                    placeholder=&quot;All Repositories&quot;&#13;&#10;                    class=&quot;w-48&quot;&#13;&#10;                    @change=&quot;fetchPullRequests&quot;&#13;&#10;                /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                &lt;label class=&quot;text-sm font-medium text-gray-700&quot;&gt;State:&lt;/label&gt;&#13;&#10;                &lt;Dropdown&#13;&#10;                    v-model=&quot;selectedState&quot;&#13;&#10;                    :options=&quot;stateOptions&quot;&#13;&#10;                    optionLabel=&quot;label&quot;&#13;&#10;                    optionValue=&quot;value&quot;&#13;&#10;                    placeholder=&quot;All States&quot;&#13;&#10;                    class=&quot;w-32&quot;&#13;&#10;                    @change=&quot;fetchPullRequests&quot;&#13;&#10;                /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;Button&#13;&#10;                label=&quot;Refresh&quot;&#13;&#10;                icon=&quot;pi pi-refresh&quot;&#13;&#10;                @click=&quot;fetchPullRequests&quot;&#13;&#10;                :loading=&quot;loading&quot;&#13;&#10;                class=&quot;ml-auto&quot;&#13;&#10;            /&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;!-- Statistics Cards --&gt;&#13;&#10;        &lt;div class=&quot;mt-6 grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#13;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#13;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;div class=&quot;p-2 bg-blue-100 rounded-lg&quot;&gt;&#13;&#10;                        &lt;i class=&quot;pi pi-git-merge text-blue-600 text-xl&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#13;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Total PRs&lt;/p&gt;&#13;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.total || 0 }}&lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#13;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;div class=&quot;p-2 bg-green-100 rounded-lg&quot;&gt;&#13;&#10;                        &lt;i class=&quot;pi pi-check-circle text-green-600 text-xl&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#13;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Open&lt;/p&gt;&#13;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.open || 0 }}&lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#13;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;div class=&quot;p-2 bg-purple-100 rounded-lg&quot;&gt;&#13;&#10;                        &lt;i class=&quot;pi pi-check text-purple-600 text-xl&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#13;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Merged&lt;/p&gt;&#13;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.merged || 0 }}&lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow p-6&quot;&gt;&#13;&#10;                &lt;div class=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;div class=&quot;p-2 bg-orange-100 rounded-lg&quot;&gt;&#13;&#10;                        &lt;i class=&quot;pi pi-eye text-orange-600 text-xl&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div class=&quot;ml-4&quot;&gt;&#13;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Reviewed&lt;/p&gt;&#13;&#10;                        &lt;p class=&quot;text-2xl font-semibold&quot;&gt;{{ statistics.reviewed || 0 }}&lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;!-- Loading state --&gt;&#13;&#10;        &lt;div v-if=&quot;loading&quot; class=&quot;mt-8 text-center&quot;&gt;&#13;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#13;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading pull requests...&lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;!-- Empty state --&gt;&#13;&#10;        &lt;div v-else-if=&quot;pullRequests.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#13;&#10;            &lt;i class=&quot;pi pi-git-merge text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#13;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No pull requests found&lt;/h3&gt;&#13;&#10;            &lt;p class=&quot;mt-2 text-gray-500&quot;&gt;&#13;&#10;                {{ selectedState || selectedRepositoryId ? 'Try adjusting your filters' : 'Pull requests will appear here when GitHub webhooks are triggered' }}&#13;&#10;            &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;!-- Pull Requests Table --&gt;&#13;&#10;        &lt;DataTable&#13;&#10;            v-else&#13;&#10;            :value=&quot;pullRequests&quot;&#13;&#10;            class=&quot;mt-8&quot;&#13;&#10;            :paginator=&quot;true&quot;&#13;&#10;            :rows=&quot;15&quot;&#13;&#10;            :rowsPerPageOptions=&quot;[10, 15, 25]&quot;&#13;&#10;            sortMode=&quot;multiple&quot;&#13;&#10;        &gt;&#13;&#10;            &lt;Column field=&quot;title&quot; header=&quot;Title&quot; sortable&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;div&gt;&#13;&#10;                        &lt;a&#13;&#10;                            :href=&quot;slotProps.data.html_url&quot;&#13;&#10;                            target=&quot;_blank&quot;&#13;&#10;                            class=&quot;font-medium text-indigo-600 hover:text-indigo-900&quot;&#13;&#10;                        &gt;&#13;&#10;                            {{ slotProps.data.title }}&#13;&#10;                        &lt;/a&gt;&#13;&#10;                        &lt;p class=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                            #{{ slotProps.data.github_pr_number }}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column field=&quot;repository.name&quot; header=&quot;Repository&quot; sortable /&gt;&#13;&#10;&#13;&#10;            &lt;Column field=&quot;state&quot; header=&quot;State&quot; sortable&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;Tag&#13;&#10;                        :value=&quot;slotProps.data.state&quot;&#13;&#10;                        :severity=&quot;getStateSeverity(slotProps.data.state)&quot;&#13;&#10;                        class=&quot;capitalize&quot;&#13;&#10;                    /&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column field=&quot;author_username&quot; header=&quot;Author&quot; sortable&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                        &lt;img&#13;&#10;                            v-if=&quot;slotProps.data.author_avatar_url&quot;&#13;&#10;                            :src=&quot;slotProps.data.author_avatar_url&quot;&#13;&#10;                            :alt=&quot;slotProps.data.author_username&quot;&#13;&#10;                            class=&quot;w-6 h-6 rounded-full&quot;&#13;&#10;                        &gt;&#13;&#10;                        &lt;span&gt;{{ slotProps.data.author_username }}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column field=&quot;head_branch&quot; header=&quot;Branch&quot; sortable&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;code class=&quot;text-sm bg-gray-100 px-2 py-1 rounded&quot;&gt;&#13;&#10;                        {{ slotProps.data.head_branch }}&#13;&#10;                    &lt;/code&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column header=&quot;Reviews&quot;&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                        &lt;span class=&quot;text-sm text-gray-600&quot;&gt;&#13;&#10;                            {{ slotProps.data.reviews?.length || 0 }} reviews&#13;&#10;                        &lt;/span&gt;&#13;&#10;                        &lt;Tag&#13;&#10;                            v-if=&quot;hasAiReview(slotProps.data.reviews)&quot;&#13;&#10;                            value=&quot;AI&quot;&#13;&#10;                            severity=&quot;info&quot;&#13;&#10;                            class=&quot;text-xs&quot;&#13;&#10;                        /&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Created&quot; sortable&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    {{ formatDate(slotProps.data.created_at) }}&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;&#13;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#13;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#13;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#13;&#10;                        &lt;Button&#13;&#10;                            label=&quot;View Reviews&quot;&#13;&#10;                            icon=&quot;pi pi-comments&quot;&#13;&#10;                            size=&quot;small&quot;&#13;&#10;                            text&#13;&#10;                            @click=&quot;viewReviews(slotProps.data)&quot;&#13;&#10;                        /&gt;&#13;&#10;                        &lt;Button&#13;&#10;                            v-if=&quot;slotProps.data.state === 'open'&quot;&#13;&#10;                            label=&quot;Trigger Review&quot;&#13;&#10;                            icon=&quot;pi pi-refresh&quot;&#13;&#10;                            size=&quot;small&quot;&#13;&#10;                            text&#13;&#10;                            @click=&quot;triggerReview(slotProps.data)&quot;&#13;&#10;                        /&gt;&#13;&#10;                        &lt;Button&#13;&#10;                            label=&quot;GitHub&quot;&#13;&#10;                            icon=&quot;pi pi-external-link&quot;&#13;&#10;                            size=&quot;small&quot;&#13;&#10;                            text&#13;&#10;                            @click=&quot;() =&gt; window.open(slotProps.data.html_url, '_blank')&quot;&#13;&#10;                        /&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/template&gt;&#13;&#10;            &lt;/Column&gt;&#13;&#10;        &lt;/DataTable&gt;&#13;&#10;&#13;&#10;        &lt;!-- Review Details Dialog --&gt;&#13;&#10;        &lt;Dialog&#13;&#10;            v-model:visible=&quot;showReviewDialog&quot;&#13;&#10;            header=&quot;Pull Request Reviews&quot;&#13;&#10;            modal&#13;&#10;            class=&quot;w-full max-w-4xl&quot;&#13;&#10;        &gt;&#13;&#10;            &lt;div v-if=&quot;selectedPullRequest&quot; class=&quot;space-y-6&quot;&gt;&#13;&#10;                &lt;!-- PR Info --&gt;&#13;&#10;                &lt;div class=&quot;border-b pb-4&quot;&gt;&#13;&#10;                    &lt;h3 class=&quot;text-lg font-semibold&quot;&gt;{{ selectedPullRequest.title }}&lt;/h3&gt;&#13;&#10;                    &lt;p class=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#13;&#10;                        PR #{{ selectedPullRequest.github_pr_number }} by {{ selectedPullRequest.author_username }}&#13;&#10;                    &lt;/p&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;!-- Reviews List --&gt;&#13;&#10;                &lt;div v-if=&quot;selectedPullRequestReviews.length &gt; 0&quot; class=&quot;space-y-4&quot;&gt;&#13;&#10;                    &lt;h4 class=&quot;font-medium&quot;&gt;Reviews ({{ selectedPullRequestReviews.length }})&lt;/h4&gt;&#13;&#10;&#13;&#10;                    &lt;div&#13;&#10;                        v-for=&quot;review in selectedPullRequestReviews&quot;&#13;&#10;                        :key=&quot;review.id&quot;&#13;&#10;                        class=&quot;border rounded-lg p-4&quot;&#13;&#10;                    &gt;&#13;&#10;                        &lt;div class=&quot;flex items-center justify-between mb-3&quot;&gt;&#13;&#10;                            &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                                &lt;Tag&#13;&#10;                                    :value=&quot;review.review_type === 'ai_auto' ? 'AI Review' : 'Manual Review'&quot;&#13;&#10;                                    :severity=&quot;review.review_type === 'ai_auto' ? 'info' : 'success'&quot;&#13;&#10;                                /&gt;&#13;&#10;                                &lt;Tag&#13;&#10;                                    :value=&quot;review.status&quot;&#13;&#10;                                    :severity=&quot;getReviewStatusSeverity(review.status)&quot;&#13;&#10;                                /&gt;&#13;&#10;                                &lt;span v-if=&quot;review.score&quot; class=&quot;text-sm font-medium&quot;&gt;&#13;&#10;                                    Score: {{ review.score }}/10&#13;&#10;                                &lt;/span&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;span class=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                                {{ formatDate(review.reviewed_at || review.created_at) }}&#13;&#10;                            &lt;/span&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;&#13;&#10;                        &lt;div v-if=&quot;review.summary&quot; class=&quot;mb-3&quot;&gt;&#13;&#10;                            &lt;h5 class=&quot;font-medium mb-1&quot;&gt;Summary:&lt;/h5&gt;&#13;&#10;                            &lt;p class=&quot;text-sm text-gray-700&quot;&gt;{{ review.summary }}&lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;&#13;&#10;                        &lt;div v-if=&quot;review.feedback&quot; class=&quot;mb-3&quot;&gt;&#13;&#10;                            &lt;h5 class=&quot;font-medium mb-1&quot;&gt;Detailed Feedback:&lt;/h5&gt;&#13;&#10;                            &lt;div class=&quot;text-sm text-gray-700 whitespace-pre-line bg-gray-50 p-3 rounded&quot;&gt;&#13;&#10;                                {{ review.feedback }}&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;&#13;&#10;                        &lt;!-- Issues --&gt;&#13;&#10;                        &lt;div v-if=&quot;hasIssues(review)&quot; class=&quot;grid grid-cols-1 md:grid-cols-3 gap-4 mt-4&quot;&gt;&#13;&#10;                            &lt;div v-if=&quot;review.security_issues?.length&quot;&gt;&#13;&#10;                                &lt;h6 class=&quot;font-medium text-red-700 mb-2&quot;&gt;Security Issues&lt;/h6&gt;&#13;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#13;&#10;                                    &lt;div&#13;&#10;                                        v-for=&quot;issue in review.security_issues&quot;&#13;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#13;&#10;                                        class=&quot;text-xs bg-red-50 p-2 rounded&quot;&#13;&#10;                                    &gt;&#13;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            &lt;div v-if=&quot;review.performance_issues?.length&quot;&gt;&#13;&#10;                                &lt;h6 class=&quot;font-medium text-yellow-700 mb-2&quot;&gt;Performance Issues&lt;/h6&gt;&#13;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#13;&#10;                                    &lt;div&#13;&#10;                                        v-for=&quot;issue in review.performance_issues&quot;&#13;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#13;&#10;                                        class=&quot;text-xs bg-yellow-50 p-2 rounded&quot;&#13;&#10;                                    &gt;&#13;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;&#13;&#10;                            &lt;div v-if=&quot;review.code_quality_issues?.length&quot;&gt;&#13;&#10;                                &lt;h6 class=&quot;font-medium text-blue-700 mb-2&quot;&gt;Quality Issues&lt;/h6&gt;&#13;&#10;                                &lt;div class=&quot;space-y-1&quot;&gt;&#13;&#10;                                    &lt;div&#13;&#10;                                        v-for=&quot;issue in review.code_quality_issues&quot;&#13;&#10;                                        :key=&quot;issue.file + issue.issue&quot;&#13;&#10;                                        class=&quot;text-xs bg-blue-50 p-2 rounded&quot;&#13;&#10;                                    &gt;&#13;&#10;                                        &lt;strong&gt;{{ issue.file }}:&lt;/strong&gt; {{ issue.description }}&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;&#13;&#10;                        &lt;!-- Suggestions --&gt;&#13;&#10;                        &lt;div v-if=&quot;review.suggestions?.length&quot; class=&quot;mt-4&quot;&gt;&#13;&#10;                            &lt;h6 class=&quot;font-medium text-green-700 mb-2&quot;&gt;Suggestions&lt;/h6&gt;&#13;&#10;                            &lt;div class=&quot;space-y-1&quot;&gt;&#13;&#10;                                &lt;div&#13;&#10;                                    v-for=&quot;suggestion in review.suggestions&quot;&#13;&#10;                                    :key=&quot;suggestion.file + suggestion.suggestion&quot;&#13;&#10;                                    class=&quot;text-xs bg-green-50 p-2 rounded&quot;&#13;&#10;                                &gt;&#13;&#10;                                    &lt;strong&gt;{{ suggestion.file }}:&lt;/strong&gt; {{ suggestion.description }}&#13;&#10;                                &lt;/div&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;div v-else class=&quot;text-center py-8 text-gray-500&quot;&gt;&#13;&#10;                    &lt;i class=&quot;pi pi-comments text-2xl&quot;&gt;&lt;/i&gt;&#13;&#10;                    &lt;p class=&quot;mt-2&quot;&gt;No reviews yet&lt;/p&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/Dialog&gt;&#13;&#10;    &lt;/MainLayout&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script setup&gt;&#13;&#10;import { ref, onMounted, computed } from 'vue';&#13;&#10;import { useRouter } from 'vue-router';&#13;&#10;import { useToast } from 'primevue/usetoast';&#13;&#10;import Button from 'primevue/button';&#13;&#10;import Dialog from 'primevue/dialog';&#13;&#10;import DataTable from 'primevue/datatable';&#13;&#10;import Column from 'primevue/column';&#13;&#10;import Tag from 'primevue/tag';&#13;&#10;import Dropdown from 'primevue/dropdown';&#13;&#10;import MainLayout from '@/components/CustomComponents/MainLayout.vue';&#13;&#10;import PageHeader from '@/components/CustomComponents/PageHeader.vue';&#13;&#10;import { useAuth } from '@/utils/composables/useAuth';&#13;&#10;&#13;&#10;// State&#13;&#10;const loading = ref(false);&#13;&#10;const pullRequests = ref([]);&#13;&#10;const repositories = ref([]);&#13;&#10;const statistics = ref({});&#13;&#10;const selectedRepositoryId = ref(null);&#13;&#10;const selectedState = ref(null);&#13;&#10;const showReviewDialog = ref(false);&#13;&#10;const selectedPullRequest = ref(null);&#13;&#10;const selectedPullRequestReviews = ref([]);&#13;&#10;&#13;&#10;const router = useRouter();&#13;&#10;const toast = useToast();&#13;&#10;&#13;&#10;// API base URL&#13;&#10;const API_BASE = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';&#13;&#10;&#13;&#10;// Computed properties&#13;&#10;const repositoryOptions = computed(() =&gt; [&#13;&#10;    { label: 'All Repositories', value: null },&#13;&#10;    ...repositories.value.map(repo =&gt; ({&#13;&#10;        label: repo.name,&#13;&#10;        value: repo.id&#13;&#10;    }))&#13;&#10;]);&#13;&#10;&#13;&#10;const stateOptions = [&#13;&#10;    { label: 'All States', value: null },&#13;&#10;    { label: 'Open', value: 'open' },&#13;&#10;    { label: 'Closed', value: 'closed' },&#13;&#10;    { label: 'Merged', value: 'merged' }&#13;&#10;];&#13;&#10;&#13;&#10;// Utility functions&#13;&#10;const getAuthHeaders = () =&gt; {&#13;&#10;    const token = localStorage.getItem('token');&#13;&#10;    if (!token) {&#13;&#10;        router.push('/auth/login1');&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;    return {&#13;&#10;        'Authorization': `Bearer ${token}`,&#13;&#10;        'Content-Type': 'application/json',&#13;&#10;        'Accept': 'application/json'&#13;&#10;    };&#13;&#10;};&#13;&#10;&#13;&#10;const formatDate = (dateString) =&gt; {&#13;&#10;    return new Date(dateString).toLocaleDateString('en-US', {&#13;&#10;        year: 'numeric',&#13;&#10;        month: 'short',&#13;&#10;        day: 'numeric',&#13;&#10;        hour: '2-digit',&#13;&#10;        minute: '2-digit'&#13;&#10;    });&#13;&#10;};&#13;&#10;&#13;&#10;const getStateSeverity = (state) =&gt; {&#13;&#10;    switch (state) {&#13;&#10;        case 'open': return 'success';&#13;&#10;        case 'merged': return 'info';&#13;&#10;        case 'closed': return 'warning';&#13;&#10;        default: return 'secondary';&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const getReviewStatusSeverity = (status) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;        case 'completed': return 'success';&#13;&#10;        case 'pending': return 'warning';&#13;&#10;        case 'processing': return 'info';&#13;&#10;        case 'failed': return 'danger';&#13;&#10;        default: return 'secondary';&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const hasAiReview = (reviews) =&gt; {&#13;&#10;    return reviews?.some(review =&gt; review.review_type === 'ai_auto');&#13;&#10;};&#13;&#10;&#13;&#10;const hasIssues = (review) =&gt; {&#13;&#10;    return (review.security_issues?.length &gt; 0) ||&#13;&#10;        (review.performance_issues?.length &gt; 0) ||&#13;&#10;        (review.code_quality_issues?.length &gt; 0);&#13;&#10;};&#13;&#10;&#13;&#10;// API functions&#13;&#10;const fetchPullRequests = async () =&gt; {&#13;&#10;    try {&#13;&#10;        loading.value = true;&#13;&#10;        const headers = getAuthHeaders();&#13;&#10;        if (!headers) return;&#13;&#10;&#13;&#10;        const params = new URLSearchParams();&#13;&#10;        if (selectedRepositoryId.value) params.append('repository_id', selectedRepositoryId.value);&#13;&#10;        if (selectedState.value) params.append('state', selectedState.value);&#13;&#10;&#13;&#10;        const url = `${API_BASE}/pull-requests${params.toString() ? '?' + params.toString() : ''}`;&#13;&#10;        const response = await fetch(url, { headers });&#13;&#10;&#13;&#10;        if (response.status === 401) {&#13;&#10;            localStorage.removeItem('token');&#13;&#10;            router.push('/auth/login1');&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (!response.ok) {&#13;&#10;            const errorData = await response.json();&#13;&#10;            throw new Error(errorData.message || 'Failed to fetch pull requests');&#13;&#10;        }&#13;&#10;&#13;&#10;        const data = await response.json();&#13;&#10;        pullRequests.value = data.pull_requests?.data || data.pull_requests || [];&#13;&#10;&#13;&#10;    } catch (error) {&#13;&#10;        console.error('Error fetching pull requests:', error);&#13;&#10;        toast.add({&#13;&#10;            severity: 'error',&#13;&#10;            summary: 'Error',&#13;&#10;            detail: 'Failed to load pull requests: ' + error.message,&#13;&#10;            life: 5000,&#13;&#10;        });&#13;&#10;    } finally {&#13;&#10;        loading.value = false;&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const fetchRepositories = async () =&gt; {&#13;&#10;    try {&#13;&#10;        const headers = getAuthHeaders();&#13;&#10;        if (!headers) return;&#13;&#10;&#13;&#10;        const response = await fetch(`${API_BASE}/repositories`, { headers });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;            const data = await response.json();&#13;&#10;            repositories.value = data.repositories || [];&#13;&#10;        }&#13;&#10;    } catch (error) {&#13;&#10;        console.error('Error fetching repositories:', error);&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const fetchStatistics = async () =&gt; {&#13;&#10;    try {&#13;&#10;        const headers = getAuthHeaders();&#13;&#10;        if (!headers) return;&#13;&#10;&#13;&#10;        const response = await fetch(`${API_BASE}/pull-requests/statistics`, { headers });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;            const data = await response.json();&#13;&#10;            statistics.value = data.statistics || {};&#13;&#10;        }&#13;&#10;    } catch (error) {&#13;&#10;        console.error('Error fetching statistics:', error);&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const viewReviews = async (pullRequest) =&gt; {&#13;&#10;    try {&#13;&#10;        selectedPullRequest.value = pullRequest;&#13;&#10;&#13;&#10;        const headers = getAuthHeaders();&#13;&#10;        if (!headers) return;&#13;&#10;&#13;&#10;        const response = await fetch(`${API_BASE}/pull-requests/${pullRequest.id}/reviews`, { headers });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;            const data = await response.json();&#13;&#10;            selectedPullRequestReviews.value = data.reviews || [];&#13;&#10;            showReviewDialog.value = true;&#13;&#10;        } else {&#13;&#10;            throw new Error('Failed to fetch reviews');&#13;&#10;        }&#13;&#10;    } catch (error) {&#13;&#10;        console.error('Error fetching reviews:', error);&#13;&#10;        toast.add({&#13;&#10;            severity: 'error',&#13;&#10;            summary: 'Error',&#13;&#10;            detail: 'Failed to load reviews: ' + error.message,&#13;&#10;            life: 5000,&#13;&#10;        });&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;const triggerReview = async (pullRequest) =&gt; {&#13;&#10;    try {&#13;&#10;        const headers = getAuthHeaders();&#13;&#10;        if (!headers) return;&#13;&#10;&#13;&#10;        const response = await fetch(`${API_BASE}/pull-requests/${pullRequest.id}/trigger-review`, {&#13;&#10;            method: 'POST',&#13;&#10;            headers&#13;&#10;        });&#13;&#10;&#13;&#10;        if (response.ok) {&#13;&#10;            toast.add({&#13;&#10;                severity: 'success',&#13;&#10;                summary: 'Success',&#13;&#10;                detail: 'Review triggered successfully',&#13;&#10;                life: 3000,&#13;&#10;            });&#13;&#10;&#13;&#10;            // Refresh the pull request data&#13;&#10;            await fetchPullRequests();&#13;&#10;        } else {&#13;&#10;            const errorData = await response.json();&#13;&#10;            throw new Error(errorData.message || 'Failed to trigger review');&#13;&#10;        }&#13;&#10;    } catch (error) {&#13;&#10;        console.error('Error triggering review:', error);&#13;&#10;        toast.add({&#13;&#10;            severity: 'error',&#13;&#10;            summary: 'Error',&#13;&#10;            detail: 'Failed to trigger review: ' + error.message,&#13;&#10;            life: 5000,&#13;&#10;        });&#13;&#10;    }&#13;&#10;};&#13;&#10;&#13;&#10;// Initialize&#13;&#10;const { checkAuth } = useAuth();&#13;&#10;&#13;&#10;onMounted(async () =&gt; {&#13;&#10;    if (!checkAuth()) {&#13;&#10;        router.push('/auth/login1');&#13;&#10;        return;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Check if there's a repository_id in the query parameters&#13;&#10;    const { repository_id } = router.currentRoute.value.query;&#13;&#10;    if (repository_id) {&#13;&#10;        selectedRepositoryId.value = parseInt(repository_id);&#13;&#10;    }&#13;&#10;&#13;&#10;    await Promise.all([&#13;&#10;        fetchRepositories(),&#13;&#10;        fetchStatistics(),&#13;&#10;        fetchPullRequests()&#13;&#10;    ]);&#13;&#10;});&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;@import '@/assets/GlobalStyles.css';&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/front/src/views/CustomPages/Repositories.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/front/src/views/CustomPages/Repositories.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader title=&quot;Your Repositories&quot; subtitle=&quot;Manage your repositories and submit code for AI-powered reviews.&quot; /&gt;&#10;&#10;        &lt;!-- Add Repository Buttons --&gt;&#10;        &lt;div class=&quot;mt-10 flex justify-center gap-4&quot;&gt;&#10;            &lt;StyledButton label=&quot;Add Local Repository&quot; icon=&quot;plus&quot; @click=&quot;showLocalDialog = true&quot; /&gt;&#10;            &lt;StyledButton label=&quot;Add GitHub Repository&quot; icon=&quot;github&quot; @click=&quot;fetchAvailableGithubRepos&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Local Repository Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showLocalDialog&quot; header=&quot;Add Local Repository&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;addRepository&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Name*&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.name&quot; class=&quot;w-full&quot; placeholder=&quot;Repository Name&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;URL&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.url&quot; class=&quot;w-full&quot; placeholder=&quot;https://github.com/...&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button&#10;                    type=&quot;submit&quot;&#10;                    label=&quot;Submit&quot;&#10;                    icon=&quot;pi pi-check&quot;&#10;                    :loading=&quot;loading&quot;&#10;                    class=&quot;w-full bg-indigo-600 text-white&quot;&#10;                /&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- GitHub Repositories Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showGithubDialog&quot; header=&quot;Select GitHub Repositories&quot; modal class=&quot;w-full max-w-2xl&quot;&gt;&#10;            &lt;div v-if=&quot;loadingGithubRepos&quot; class=&quot;text-center py-8&quot;&gt;&#10;                &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;Loading your GitHub repositories...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-else-if=&quot;githubError&quot; class=&quot;text-center py-8 text-red-500&quot;&gt;&#10;                &lt;i class=&quot;pi pi-exclamation-triangle text-2xl&quot;&gt;&lt;/i&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;{{ githubError }}&lt;/p&gt;&#10;                &lt;Button&#10;                    label=&quot;Connect GitHub Account&quot;&#10;                    icon=&quot;pi pi-github&quot;&#10;                    class=&quot;mt-4&quot;&#10;                    @click=&quot;$router.push('/integrations')&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-else class=&quot;space-y-4&quot;&gt;&#10;                &lt;div class=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div class=&quot;text-sm text-gray-500&quot;&gt;&#10;                        {{ availableGithubRepos.length }} repositories found&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-sm font-medium&quot;&gt;&#10;                        Selected: {{ selectedGithubRepos.length }}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DataTable&#10;                    :value=&quot;availableGithubRepos&quot;&#10;                    selectionMode=&quot;multiple&quot;&#10;                    v-model:selection=&quot;selectedGithubRepos&quot;&#10;                    dataKey=&quot;id&quot;&#10;                    class=&quot;w-full&quot;&#10;                    :paginator=&quot;true&quot;&#10;                    :rows=&quot;10&quot;&#10;                    :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;                &gt;&#10;                    &lt;Column selectionMode=&quot;multiple&quot; headerStyle=&quot;width: 3rem&quot;&gt;&lt;/Column&gt;&#10;                    &lt;Column field=&quot;name&quot; header=&quot;Name&quot; sortable /&gt;&#10;                    &lt;Column field=&quot;full_name&quot; header=&quot;Full Name&quot; sortable /&gt;&#10;                    &lt;Column field=&quot;private&quot; header=&quot;Visibility&quot; sortable&gt;&#10;                        &lt;template #body=&quot;slotProps&quot;&gt;&#10;                            &lt;Tag :value=&quot;slotProps.data.private ? 'Private' : 'Public'&quot;&#10;                                 :severity=&quot;slotProps.data.private ? 'info' : 'success'&quot; /&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/Column&gt;&#10;                    &lt;Column field=&quot;html_url&quot; header=&quot;URL&quot;&gt;&#10;                        &lt;template #body=&quot;slotProps&quot;&gt;&#10;                            &lt;a :href=&quot;slotProps.data.html_url&quot; target=&quot;_blank&quot; class=&quot;text-indigo-600 hover:underline&quot;&gt;&#10;                                {{ slotProps.data.html_url }}&#10;                            &lt;/a&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/Column&gt;&#10;                &lt;/DataTable&gt;&#10;&#10;                &lt;div class=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;                    &lt;Button&#10;                        label=&quot;Cancel&quot;&#10;                        icon=&quot;pi pi-times&quot;&#10;                        class=&quot;p-button-secondary&quot;&#10;                        @click=&quot;showGithubDialog = false&quot;&#10;                    /&gt;&#10;                    &lt;Button&#10;                        label=&quot;Add Selected&quot;&#10;                        icon=&quot;pi pi-plus&quot;&#10;                        :loading=&quot;addingGithubRepos&quot;&#10;                        :disabled=&quot;selectedGithubRepos.length === 0&quot;&#10;                        @click=&quot;addGithubRepositories&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Loading state --&gt;&#10;        &lt;div v-if=&quot;loadingRepositories&quot; class=&quot;mt-8 text-center&quot;&gt;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading repositories...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Empty state --&gt;&#10;        &lt;div v-else-if=&quot;repositories.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#10;            &lt;i class=&quot;pi pi-folder-open text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No repositories yet&lt;/h3&gt;&#10;            &lt;p class=&quot;mt-2 text-gray-500&quot;&gt;Get started by adding your first repository.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Data table --&gt;&#10;        &lt;DataTable&#10;            v-else&#10;            :value=&quot;repositories&quot;&#10;            class=&quot;mt-8&quot;&#10;            :paginator=&quot;true&quot;&#10;            :rows=&quot;10&quot;&#10;            :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;        &gt;&#10;            &lt;Column field=&quot;name&quot; header=&quot;Name&quot; sortable /&gt;&#10;            &lt;Column field=&quot;provider&quot; header=&quot;Provider&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;Tag :value=&quot;slotProps.data.provider&quot;&#10;                         :severity=&quot;getProviderSeverity(slotProps.data.provider)&quot; /&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column field=&quot;url&quot; header=&quot;URL&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;a&#10;                        v-if=&quot;slotProps.data.url&quot;&#10;                        :href=&quot;slotProps.data.url&quot;&#10;                        target=&quot;_blank&quot;&#10;                        class=&quot;text-indigo-600 hover:underline&quot;&#10;                    &gt;&#10;                        {{ slotProps.data.url }}&#10;                    &lt;/a&gt;&#10;                    &lt;span v-else class=&quot;text-gray-400&quot;&gt;N/A&lt;/span&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Created&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    {{ formatDate(slotProps.data.created_at) }}&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Submissions&quot;&#10;                            icon=&quot;pi pi-eye&quot;&#10;                            class=&quot;p-button-text p-button-sm&quot;&#10;                            @click=&quot;$router.push(`/submissions/${slotProps.data.id}`)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            v-if=&quot;slotProps.data.provider === 'manual'&quot;&#10;                            label=&quot;Edit&quot;&#10;                            icon=&quot;pi pi-pencil&quot;&#10;                            class=&quot;p-button-text p-button-sm&quot;&#10;                            @click=&quot;editRepository(slotProps.data)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;Delete&quot;&#10;                            icon=&quot;pi pi-trash&quot;&#10;                            class=&quot;p-button-text p-button-danger p-button-sm&quot;&#10;                            @click=&quot;confirmDelete(slotProps.data)&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;        &lt;/DataTable&gt;&#10;&#10;        &lt;!-- Edit Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showEditDialog&quot; header=&quot;Edit Repository&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;updateRepository&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Name*&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;editForm.name&quot; class=&quot;w-full&quot; placeholder=&quot;Repository Name&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;URL&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;editForm.url&quot; class=&quot;w-full&quot; placeholder=&quot;https://github.com/...&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        label=&quot;Update&quot;&#10;                        icon=&quot;pi pi-check&quot;&#10;                        :loading=&quot;updating&quot;&#10;                        class=&quot;flex-1 bg-indigo-600 text-white&quot;&#10;                    /&gt;&#10;                    &lt;Button&#10;                        type=&quot;button&quot;&#10;                        label=&quot;Cancel&quot;&#10;                        icon=&quot;pi pi-times&quot;&#10;                        class=&quot;flex-1 p-button-secondary&quot;&#10;                        @click=&quot;cancelEdit&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Delete Confirmation Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showDeleteDialog&quot; header=&quot;Confirm Delete&quot; modal class=&quot;w-full max-w-sm&quot;&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;Are you sure you want to delete &quot;{{ repositoryToDelete?.name }}&quot;? This action cannot be undone.&lt;/p&gt;&#10;            &lt;div class=&quot;flex gap-2 justify-end&quot;&gt;&#10;                &lt;Button&#10;                    label=&quot;Cancel&quot;&#10;                    icon=&quot;pi pi-times&quot;&#10;                    class=&quot;p-button-secondary&quot;&#10;                    @click=&quot;showDeleteDialog = false&quot;&#10;                /&gt;&#10;                &lt;Button&#10;                    label=&quot;Delete&quot;&#10;                    icon=&quot;pi pi-trash&quot;&#10;                    class=&quot;p-button-danger&quot;&#10;                    :loading=&quot;deleting&quot;&#10;                    @click=&quot;deleteRepository&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/Dialog&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { onMounted, ref } from 'vue';&#10;import { useRouter } from 'vue-router';&#10;import { useToast } from 'primevue/usetoast';&#10;import Button from 'primevue/button';&#10;import Dialog from 'primevue/dialog';&#10;import InputText from 'primevue/inputtext';&#10;import Dropdown from 'primevue/dropdown';&#10;import DataTable from 'primevue/datatable';&#10;import Column from 'primevue/column';&#10;import Tag from 'primevue/tag';&#10;import MainLayout from '@/components/CustomComponents/MainLayout.vue';&#10;import PageHeader from '@/components/CustomComponents/PageHeader.vue';&#10;import StyledButton from '@/components/CustomComponents/StyledButton.vue';&#10;import { useAuth } from '@/utils/composables/useAuth';&#10;&#10;// State&#10;const showLocalDialog = ref(false);&#10;const showGithubDialog = ref(false);&#10;const showEditDialog = ref(false);&#10;const showDeleteDialog = ref(false);&#10;const loading = ref(false);&#10;const loadingRepositories = ref(true);&#10;const loadingGithubRepos = ref(false);&#10;const addingGithubRepos = ref(false);&#10;const updating = ref(false);&#10;const deleting = ref(false);&#10;const githubError = ref(null);&#10;&#10;const form = ref({ name: '', url: '', provider: 'manual' });&#10;const editForm = ref({ name: '', url: '', provider: 'manual' });&#10;const repositories = ref([]);&#10;const availableGithubRepos = ref([]);&#10;const selectedGithubRepos = ref([]);&#10;const repositoryToEdit = ref(null);&#10;const repositoryToDelete = ref(null);&#10;&#10;const router = useRouter();&#10;const toast = useToast();&#10;&#10;// API base URL&#10;const API_BASE = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';&#10;&#10;// Utility functions&#10;const getAuthHeaders = () =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (!token) {&#10;        console.error('No token found in localStorage');&#10;        router.push('/auth/login1');&#10;        return null;&#10;    }&#10;    return {&#10;        'Authorization': `Bearer ${token}`,&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;    };&#10;};&#10;&#10;const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric'&#10;    });&#10;};&#10;&#10;const getProviderSeverity = (provider) =&gt; {&#10;    switch (provider) {&#10;        case 'github': return 'info';&#10;        case 'gitlab': return 'warning';&#10;        default: return 'success';&#10;    }&#10;};&#10;&#10;// Repository operations&#10;const fetchRepositories = async () =&gt; {&#10;    try {&#10;        loadingRepositories.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/repositories`, { headers });&#10;&#10;        if (response.status === 401) {&#10;            localStorage.removeItem('token');&#10;            router.push('/auth/login1');&#10;            return;&#10;        }&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value = data.repositories || [];&#10;    } catch (error) {&#10;        console.error('Error fetching repositories:', error);&#10;&#10;        if (error.message.includes('401') || error.message.includes('Unauthorized')) {&#10;            localStorage.removeItem('token');&#10;            router.push('/auth/login1');&#10;            return;&#10;        }&#10;&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to load repositories: ' + error.message,&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loadingRepositories.value = false;&#10;    }&#10;};&#10;&#10;const addRepository = async () =&gt; {&#10;    if (!form.value.name) {&#10;        toast.add({&#10;            severity: 'warn',&#10;            summary: 'Validation Error',&#10;            detail: 'Name is required',&#10;            life: 3000,&#10;        });&#10;        return;&#10;    }&#10;&#10;    try {&#10;        loading.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories`, {&#10;            method: 'POST',&#10;            headers: getAuthHeaders(),&#10;            body: JSON.stringify(form.value)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to create repository');&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value.push(data.repository);&#10;        form.value = { name: '', url: '', provider: 'manual' };&#10;        showLocalDialog.value = false;&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository added successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error adding repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to add repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loading.value = false;&#10;    }&#10;};&#10;&#10;const editRepository = (repository) =&gt; {&#10;    repositoryToEdit.value = repository;&#10;    editForm.value = {&#10;        name: repository.name,&#10;        url: repository.url || '',&#10;        provider: repository.provider&#10;    };&#10;    showEditDialog.value = true;&#10;};&#10;&#10;const updateRepository = async () =&gt; {&#10;    if (!editForm.value.name) {&#10;        toast.add({&#10;            severity: 'warn',&#10;            summary: 'Validation Error',&#10;            detail: 'Name is required',&#10;            life: 3000,&#10;        });&#10;        return;&#10;    }&#10;&#10;    try {&#10;        updating.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories/${repositoryToEdit.value.id}`, {&#10;            method: 'PUT',&#10;            headers: getAuthHeaders(),&#10;            body: JSON.stringify(editForm.value)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to update repository');&#10;        }&#10;&#10;        const data = await response.json();&#10;        const index = repositories.value.findIndex(repo =&gt; repo.id === repositoryToEdit.value.id);&#10;        if (index !== -1) {&#10;            repositories.value[index] = data.repository;&#10;        }&#10;&#10;        cancelEdit();&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository updated successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error updating repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to update repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        updating.value = false;&#10;    }&#10;};&#10;&#10;const cancelEdit = () =&gt; {&#10;    showEditDialog.value = false;&#10;    repositoryToEdit.value = null;&#10;    editForm.value = { name: '', url: '', provider: 'manual' };&#10;};&#10;&#10;const confirmDelete = (repository) =&gt; {&#10;    repositoryToDelete.value = repository;&#10;    showDeleteDialog.value = true;&#10;};&#10;&#10;const deleteRepository = async () =&gt; {&#10;    try {&#10;        deleting.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories/${repositoryToDelete.value.id}`, {&#10;            method: 'DELETE',&#10;            headers: getAuthHeaders()&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to delete repository');&#10;        }&#10;&#10;        repositories.value = repositories.value.filter(repo =&gt; repo.id !== repositoryToDelete.value.id);&#10;        showDeleteDialog.value = false;&#10;        repositoryToDelete.value = null;&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository deleted successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error deleting repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to delete repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        deleting.value = false;&#10;    }&#10;};&#10;&#10;// GitHub operations&#10;const fetchAvailableGithubRepos = async () =&gt; {&#10;    try {&#10;        loadingGithubRepos.value = true;&#10;        githubError.value = null;&#10;        showGithubDialog.value = true;&#10;        selectedGithubRepos.value = [];&#10;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/github/fetch-repos`, { headers });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            if (errorData.message.includes('No GitHub token')) {&#10;                githubError.value = 'Please connect your GitHub account first';&#10;                return;&#10;            }&#10;            throw new Error(errorData.message || 'Failed to fetch GitHub repositories');&#10;        }&#10;&#10;        const data = await response.json();&#10;        availableGithubRepos.value = data.repositories || [];&#10;    } catch (error) {&#10;        console.error('Error fetching GitHub repositories:', error);&#10;        githubError.value = error.message || 'Failed to fetch GitHub repositories';&#10;    } finally {&#10;        loadingGithubRepos.value = false;&#10;    }&#10;};&#10;&#10;const addGithubRepositories = async () =&gt; {&#10;    if (selectedGithubRepos.value.length === 0) return;&#10;&#10;    try {&#10;        addingGithubRepos.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const reposToAdd = selectedGithubRepos.value.map(repo =&gt; ({&#10;            name: repo.name,&#10;            url: repo.html_url,&#10;            provider: 'github',&#10;            github_repo_id: repo.id,&#10;            full_name: repo.full_name,&#10;            private: repo.private // Add this if your database supports it&#10;        }));&#10;&#10;        console.log('Sending these repositories to backend:', reposToAdd); // Debug log&#10;&#10;        const response = await fetch(`${API_BASE}/repositories/batch`, {&#10;            method: 'POST',&#10;            headers: {&#10;                ...headers,&#10;                'Content-Type': 'application/json'&#10;            },&#10;            body: JSON.stringify({ repositories: reposToAdd })&#10;        });&#10;&#10;        console.log('Response status:', response.status); // Debug log&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({}));&#10;            console.error('Detailed error from backend:', errorData); // Debug log&#10;            throw new Error(errorData.message || 'Failed to add GitHub repositories. Status: ' + response.status);&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value.push(...data.repositories);&#10;        showGithubDialog.value = false;&#10;        selectedGithubRepos.value = [];&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: `Added ${data.repositories.length} GitHub repositories`,&#10;            life: 5000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Full error adding GitHub repositories:', error); // Debug log&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to add GitHub repositories. Check console for details.',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        addingGithubRepos.value = false;&#10;    }&#10;};&#10;&#10;// Initialize&#10;const { checkAuth } = useAuth();&#10;&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;    await fetchRepositories();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader title=&quot;Your Repositories&quot; subtitle=&quot;Manage your repositories and submit code for AI-powered reviews.&quot; /&gt;&#10;&#10;        &lt;!-- Add Repository Buttons --&gt;&#10;        &lt;div class=&quot;mt-10 flex justify-center gap-4&quot;&gt;&#10;            &lt;StyledButton label=&quot;Add Local Repository&quot; icon=&quot;plus&quot; @click=&quot;showLocalDialog = true&quot; /&gt;&#10;            &lt;StyledButton label=&quot;Add GitHub Repository&quot; icon=&quot;github&quot; @click=&quot;fetchAvailableGithubRepos&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Local Repository Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showLocalDialog&quot; header=&quot;Add Local Repository&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;addRepository&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Name*&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.name&quot; class=&quot;w-full&quot; placeholder=&quot;Repository Name&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;URL&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.url&quot; class=&quot;w-full&quot; placeholder=&quot;https://github.com/...&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button&#10;                    type=&quot;submit&quot;&#10;                    label=&quot;Submit&quot;&#10;                    icon=&quot;pi pi-check&quot;&#10;                    :loading=&quot;loading&quot;&#10;                    class=&quot;w-full bg-indigo-600 text-white&quot;&#10;                /&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- GitHub Repositories Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showGithubDialog&quot; header=&quot;Select GitHub Repositories&quot; modal class=&quot;w-full max-w-2xl&quot;&gt;&#10;            &lt;div v-if=&quot;loadingGithubRepos&quot; class=&quot;text-center py-8&quot;&gt;&#10;                &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;Loading your GitHub repositories...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-else-if=&quot;githubError&quot; class=&quot;text-center py-8 text-red-500&quot;&gt;&#10;                &lt;i class=&quot;pi pi-exclamation-triangle text-2xl&quot;&gt;&lt;/i&gt;&#10;                &lt;p class=&quot;mt-2&quot;&gt;{{ githubError }}&lt;/p&gt;&#10;                &lt;Button&#10;                    label=&quot;Connect GitHub Account&quot;&#10;                    icon=&quot;pi pi-github&quot;&#10;                    class=&quot;mt-4&quot;&#10;                    @click=&quot;$router.push('/integrations')&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div v-else class=&quot;space-y-4&quot;&gt;&#10;                &lt;div class=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div class=&quot;text-sm text-gray-500&quot;&gt;&#10;                        {{ availableGithubRepos.length }} repositories found&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-sm font-medium&quot;&gt;&#10;                        Selected: {{ selectedGithubRepos.length }}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DataTable&#10;                    :value=&quot;availableGithubRepos&quot;&#10;                    selectionMode=&quot;multiple&quot;&#10;                    v-model:selection=&quot;selectedGithubRepos&quot;&#10;                    dataKey=&quot;id&quot;&#10;                    class=&quot;w-full&quot;&#10;                    :paginator=&quot;true&quot;&#10;                    :rows=&quot;10&quot;&#10;                    :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;                &gt;&#10;                    &lt;Column selectionMode=&quot;multiple&quot; headerStyle=&quot;width: 3rem&quot;&gt;&lt;/Column&gt;&#10;                    &lt;Column field=&quot;name&quot; header=&quot;Name&quot; sortable /&gt;&#10;                    &lt;Column field=&quot;full_name&quot; header=&quot;Full Name&quot; sortable /&gt;&#10;                    &lt;Column field=&quot;private&quot; header=&quot;Visibility&quot; sortable&gt;&#10;                        &lt;template #body=&quot;slotProps&quot;&gt;&#10;                            &lt;Tag :value=&quot;slotProps.data.private ? 'Private' : 'Public'&quot;&#10;                                 :severity=&quot;slotProps.data.private ? 'info' : 'success'&quot; /&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/Column&gt;&#10;                    &lt;Column field=&quot;html_url&quot; header=&quot;URL&quot;&gt;&#10;                        &lt;template #body=&quot;slotProps&quot;&gt;&#10;                            &lt;a :href=&quot;slotProps.data.html_url&quot; target=&quot;_blank&quot; class=&quot;text-indigo-600 hover:underline&quot;&gt;&#10;                                {{ slotProps.data.html_url }}&#10;                            &lt;/a&gt;&#10;                        &lt;/template&gt;&#10;                    &lt;/Column&gt;&#10;                &lt;/DataTable&gt;&#10;&#10;                &lt;div class=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;                    &lt;Button&#10;                        label=&quot;Cancel&quot;&#10;                        icon=&quot;pi pi-times&quot;&#10;                        class=&quot;p-button-secondary&quot;&#10;                        @click=&quot;showGithubDialog = false&quot;&#10;                    /&gt;&#10;                    &lt;Button&#10;                        label=&quot;Add Selected&quot;&#10;                        icon=&quot;pi pi-plus&quot;&#10;                        :loading=&quot;addingGithubRepos&quot;&#10;                        :disabled=&quot;selectedGithubRepos.length === 0&quot;&#10;                        @click=&quot;addGithubRepositories&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Loading state --&gt;&#10;        &lt;div v-if=&quot;loadingRepositories&quot; class=&quot;mt-8 text-center&quot;&gt;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading repositories...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Empty state --&gt;&#10;        &lt;div v-else-if=&quot;repositories.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#10;            &lt;i class=&quot;pi pi-folder-open text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No repositories yet&lt;/h3&gt;&#10;            &lt;p class=&quot;mt-2 text-gray-500&quot;&gt;Get started by adding your first repository.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Data table --&gt;&#10;        &lt;DataTable&#10;            v-else&#10;            :value=&quot;repositories&quot;&#10;            class=&quot;mt-8&quot;&#10;            :paginator=&quot;true&quot;&#10;            :rows=&quot;10&quot;&#10;            :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;        &gt;&#10;            &lt;Column field=&quot;name&quot; header=&quot;Name&quot; sortable /&gt;&#10;            &lt;Column field=&quot;provider&quot; header=&quot;Provider&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;Tag :value=&quot;slotProps.data.provider&quot;&#10;                         :severity=&quot;getProviderSeverity(slotProps.data.provider)&quot; /&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column field=&quot;url&quot; header=&quot;URL&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;a&#10;                        v-if=&quot;slotProps.data.url&quot;&#10;                        :href=&quot;slotProps.data.url&quot;&#10;                        target=&quot;_blank&quot;&#10;                        class=&quot;text-indigo-600 hover:underline&quot;&#10;                    &gt;&#10;                        {{ slotProps.data.url }}&#10;                    &lt;/a&gt;&#10;                    &lt;span v-else class=&quot;text-gray-400&quot;&gt;N/A&lt;/span&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Created&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    {{ formatDate(slotProps.data.created_at) }}&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Submissions&quot;&#10;                            icon=&quot;pi pi-eye&quot;&#10;                            class=&quot;p-button-text p-button-sm&quot;&#10;                            @click=&quot;$router.push(`/submissions/${slotProps.data.id}`)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Pull Requests&quot;&#10;                            icon=&quot;pi pi-git-merge&quot;&#10;                            class=&quot;p-button-text p-button-sm&quot;&#10;                            @click=&quot;viewPullRequests(slotProps.data)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            v-if=&quot;slotProps.data.provider === 'manual'&quot;&#10;                            label=&quot;Edit&quot;&#10;                            icon=&quot;pi pi-pencil&quot;&#10;                            class=&quot;p-button-text p-button-sm&quot;&#10;                            @click=&quot;editRepository(slotProps.data)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;Delete&quot;&#10;                            icon=&quot;pi pi-trash&quot;&#10;                            class=&quot;p-button-text p-button-danger p-button-sm&quot;&#10;                            @click=&quot;confirmDelete(slotProps.data)&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;        &lt;/DataTable&gt;&#10;&#10;        &lt;!-- Edit Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showEditDialog&quot; header=&quot;Edit Repository&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;updateRepository&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Name*&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;editForm.name&quot; class=&quot;w-full&quot; placeholder=&quot;Repository Name&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;URL&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;editForm.url&quot; class=&quot;w-full&quot; placeholder=&quot;https://github.com/...&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        label=&quot;Update&quot;&#10;                        icon=&quot;pi pi-check&quot;&#10;                        :loading=&quot;updating&quot;&#10;                        class=&quot;flex-1 bg-indigo-600 text-white&quot;&#10;                    /&gt;&#10;                    &lt;Button&#10;                        type=&quot;button&quot;&#10;                        label=&quot;Cancel&quot;&#10;                        icon=&quot;pi pi-times&quot;&#10;                        class=&quot;flex-1 p-button-secondary&quot;&#10;                        @click=&quot;cancelEdit&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Delete Confirmation Dialog --&gt;&#10;        &lt;Dialog v-model:visible=&quot;showDeleteDialog&quot; header=&quot;Confirm Delete&quot; modal class=&quot;w-full max-w-sm&quot;&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;Are you sure you want to delete &quot;{{ repositoryToDelete?.name }}&quot;? This action cannot be undone.&lt;/p&gt;&#10;            &lt;div class=&quot;flex gap-2 justify-end&quot;&gt;&#10;                &lt;Button&#10;                    label=&quot;Cancel&quot;&#10;                    icon=&quot;pi pi-times&quot;&#10;                    class=&quot;p-button-secondary&quot;&#10;                    @click=&quot;showDeleteDialog = false&quot;&#10;                /&gt;&#10;                &lt;Button&#10;                    label=&quot;Delete&quot;&#10;                    icon=&quot;pi pi-trash&quot;&#10;                    class=&quot;p-button-danger&quot;&#10;                    :loading=&quot;deleting&quot;&#10;                    @click=&quot;deleteRepository&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/Dialog&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { onMounted, ref } from 'vue';&#10;import { useRouter } from 'vue-router';&#10;import { useToast } from 'primevue/usetoast';&#10;import Button from 'primevue/button';&#10;import Dialog from 'primevue/dialog';&#10;import InputText from 'primevue/inputtext';&#10;import Dropdown from 'primevue/dropdown';&#10;import DataTable from 'primevue/datatable';&#10;import Column from 'primevue/column';&#10;import Tag from 'primevue/tag';&#10;import MainLayout from '@/components/CustomComponents/MainLayout.vue';&#10;import PageHeader from '@/components/CustomComponents/PageHeader.vue';&#10;import StyledButton from '@/components/CustomComponents/StyledButton.vue';&#10;import { useAuth } from '@/utils/composables/useAuth';&#10;&#10;// State&#10;const showLocalDialog = ref(false);&#10;const showGithubDialog = ref(false);&#10;const showEditDialog = ref(false);&#10;const showDeleteDialog = ref(false);&#10;const loading = ref(false);&#10;const loadingRepositories = ref(true);&#10;const loadingGithubRepos = ref(false);&#10;const addingGithubRepos = ref(false);&#10;const updating = ref(false);&#10;const deleting = ref(false);&#10;const githubError = ref(null);&#10;&#10;const form = ref({ name: '', url: '', provider: 'manual' });&#10;const editForm = ref({ name: '', url: '', provider: 'manual' });&#10;const repositories = ref([]);&#10;const availableGithubRepos = ref([]);&#10;const selectedGithubRepos = ref([]);&#10;const repositoryToEdit = ref(null);&#10;const repositoryToDelete = ref(null);&#10;&#10;const router = useRouter();&#10;const toast = useToast();&#10;&#10;// API base URL&#10;const API_BASE = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';&#10;&#10;// Utility functions&#10;const getAuthHeaders = () =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (!token) {&#10;        console.error('No token found in localStorage');&#10;        router.push('/auth/login1');&#10;        return null;&#10;    }&#10;    return {&#10;        'Authorization': `Bearer ${token}`,&#10;        'Content-Type': 'application/json',&#10;        'Accept': 'application/json'&#10;    };&#10;};&#10;&#10;const formatDate = (dateString) =&gt; {&#10;    return new Date(dateString).toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric'&#10;    });&#10;};&#10;&#10;const getProviderSeverity = (provider) =&gt; {&#10;    switch (provider) {&#10;        case 'github': return 'info';&#10;        case 'gitlab': return 'warning';&#10;        default: return 'success';&#10;    }&#10;};&#10;&#10;// Repository operations&#10;const fetchRepositories = async () =&gt; {&#10;    try {&#10;        loadingRepositories.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/repositories`, { headers });&#10;&#10;        if (response.status === 401) {&#10;            localStorage.removeItem('token');&#10;            router.push('/auth/login1');&#10;            return;&#10;        }&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value = data.repositories || [];&#10;    } catch (error) {&#10;        console.error('Error fetching repositories:', error);&#10;&#10;        if (error.message.includes('401') || error.message.includes('Unauthorized')) {&#10;            localStorage.removeItem('token');&#10;            router.push('/auth/login1');&#10;            return;&#10;        }&#10;&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: 'Failed to load repositories: ' + error.message,&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loadingRepositories.value = false;&#10;    }&#10;};&#10;&#10;const addRepository = async () =&gt; {&#10;    if (!form.value.name) {&#10;        toast.add({&#10;            severity: 'warn',&#10;            summary: 'Validation Error',&#10;            detail: 'Name is required',&#10;            life: 3000,&#10;        });&#10;        return;&#10;    }&#10;&#10;    try {&#10;        loading.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories`, {&#10;            method: 'POST',&#10;            headers: getAuthHeaders(),&#10;            body: JSON.stringify(form.value)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to create repository');&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value.push(data.repository);&#10;        form.value = { name: '', url: '', provider: 'manual' };&#10;        showLocalDialog.value = false;&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository added successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error adding repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to add repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        loading.value = false;&#10;    }&#10;};&#10;&#10;const editRepository = (repository) =&gt; {&#10;    repositoryToEdit.value = repository;&#10;    editForm.value = {&#10;        name: repository.name,&#10;        url: repository.url || '',&#10;        provider: repository.provider&#10;    };&#10;    showEditDialog.value = true;&#10;};&#10;&#10;const updateRepository = async () =&gt; {&#10;    if (!editForm.value.name) {&#10;        toast.add({&#10;            severity: 'warn',&#10;            summary: 'Validation Error',&#10;            detail: 'Name is required',&#10;            life: 3000,&#10;        });&#10;        return;&#10;    }&#10;&#10;    try {&#10;        updating.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories/${repositoryToEdit.value.id}`, {&#10;            method: 'PUT',&#10;            headers: getAuthHeaders(),&#10;            body: JSON.stringify(editForm.value)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to update repository');&#10;        }&#10;&#10;        const data = await response.json();&#10;        const index = repositories.value.findIndex(repo =&gt; repo.id === repositoryToEdit.value.id);&#10;        if (index !== -1) {&#10;            repositories.value[index] = data.repository;&#10;        }&#10;&#10;        cancelEdit();&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository updated successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error updating repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to update repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        updating.value = false;&#10;    }&#10;};&#10;&#10;const cancelEdit = () =&gt; {&#10;    showEditDialog.value = false;&#10;    repositoryToEdit.value = null;&#10;    editForm.value = { name: '', url: '', provider: 'manual' };&#10;};&#10;&#10;const confirmDelete = (repository) =&gt; {&#10;    repositoryToDelete.value = repository;&#10;    showDeleteDialog.value = true;&#10;};&#10;&#10;const deleteRepository = async () =&gt; {&#10;    try {&#10;        deleting.value = true;&#10;        const response = await fetch(`${API_BASE}/repositories/${repositoryToDelete.value.id}`, {&#10;            method: 'DELETE',&#10;            headers: getAuthHeaders()&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            throw new Error(errorData.message || 'Failed to delete repository');&#10;        }&#10;&#10;        repositories.value = repositories.value.filter(repo =&gt; repo.id !== repositoryToDelete.value.id);&#10;        showDeleteDialog.value = false;&#10;        repositoryToDelete.value = null;&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: 'Repository deleted successfully',&#10;            life: 3000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Error deleting repository:', error);&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to delete repository',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        deleting.value = false;&#10;    }&#10;};&#10;&#10;// GitHub operations&#10;const fetchAvailableGithubRepos = async () =&gt; {&#10;    try {&#10;        loadingGithubRepos.value = true;&#10;        githubError.value = null;&#10;        showGithubDialog.value = true;&#10;        selectedGithubRepos.value = [];&#10;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const response = await fetch(`${API_BASE}/github/fetch-repos`, { headers });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json();&#10;            if (errorData.message.includes('No GitHub token')) {&#10;                githubError.value = 'Please connect your GitHub account first';&#10;                return;&#10;            }&#10;            throw new Error(errorData.message || 'Failed to fetch GitHub repositories');&#10;        }&#10;&#10;        const data = await response.json();&#10;        availableGithubRepos.value = data.repositories || [];&#10;    } catch (error) {&#10;        console.error('Error fetching GitHub repositories:', error);&#10;        githubError.value = error.message || 'Failed to fetch GitHub repositories';&#10;    } finally {&#10;        loadingGithubRepos.value = false;&#10;    }&#10;};&#10;&#10;const addGithubRepositories = async () =&gt; {&#10;    if (selectedGithubRepos.value.length === 0) return;&#10;&#10;    try {&#10;        addingGithubRepos.value = true;&#10;        const headers = getAuthHeaders();&#10;        if (!headers) return;&#10;&#10;        const reposToAdd = selectedGithubRepos.value.map(repo =&gt; ({&#10;            name: repo.name,&#10;            url: repo.html_url,&#10;            provider: 'github',&#10;            github_repo_id: repo.id,&#10;            full_name: repo.full_name,&#10;            private: repo.private // Add this if your database supports it&#10;        }));&#10;&#10;        console.log('Sending these repositories to backend:', reposToAdd); // Debug log&#10;&#10;        const response = await fetch(`${API_BASE}/repositories/batch`, {&#10;            method: 'POST',&#10;            headers: {&#10;                ...headers,&#10;                'Content-Type': 'application/json'&#10;            },&#10;            body: JSON.stringify({ repositories: reposToAdd })&#10;        });&#10;&#10;        console.log('Response status:', response.status); // Debug log&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({}));&#10;            console.error('Detailed error from backend:', errorData); // Debug log&#10;            throw new Error(errorData.message || 'Failed to add GitHub repositories. Status: ' + response.status);&#10;        }&#10;&#10;        const data = await response.json();&#10;        repositories.value.push(...data.repositories);&#10;        showGithubDialog.value = false;&#10;        selectedGithubRepos.value = [];&#10;&#10;        toast.add({&#10;            severity: 'success',&#10;            summary: 'Success',&#10;            detail: `Added ${data.repositories.length} GitHub repositories`,&#10;            life: 5000,&#10;        });&#10;    } catch (error) {&#10;        console.error('Full error adding GitHub repositories:', error); // Debug log&#10;        toast.add({&#10;            severity: 'error',&#10;            summary: 'Error',&#10;            detail: error.message || 'Failed to add GitHub repositories. Check console for details.',&#10;            life: 5000,&#10;        });&#10;    } finally {&#10;        addingGithubRepos.value = false;&#10;    }&#10;};&#10;&#10;// Navigation function for Pull Requests&#10;const viewPullRequests = (repository) =&gt; {&#10;    router.push({&#10;        path: '/pull-requests',&#10;        query: { repository_id: repository.id }&#10;    });&#10;};&#10;&#10;// Initialize&#10;const { checkAuth } = useAuth();&#10;&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;    await fetchRepositories();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/front/src/views/CustomPages/Submissions.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/front/src/views/CustomPages/Submissions.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader title=&quot;Code Submissions&quot; :subtitle=&quot;`Submit and review your code for ${repository?.name || 'Repository'}.`&quot; /&gt;&#10;&#10;        &lt;div class=&quot;mt-10 flex justify-center&quot;&gt;&#10;            &lt;StyledButton label=&quot;Add Submission&quot; icon=&quot;plus&quot; @click=&quot;showDialog = true&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;Dialog v-model:visible=&quot;showDialog&quot; header=&quot;Add Code Submission&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;addSubmission&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Title&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.title&quot; class=&quot;w-full&quot; placeholder=&quot;Submission Title&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Language&lt;/label&gt;&#10;                    &lt;Dropdown&#10;                        v-model=&quot;form.language&quot;&#10;                        :options=&quot;languages&quot;&#10;                        placeholder=&quot;Select Language&quot;&#10;                        class=&quot;w-full&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Code&lt;/label&gt;&#10;                    &lt;Textarea v-model=&quot;form.code_content&quot; class=&quot;w-full&quot; rows=&quot;10&quot; placeholder=&quot;Paste your code here&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;File Path (Optional)&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.file_path&quot; class=&quot;w-full&quot; placeholder=&quot;/path/to/file&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button&#10;                    type=&quot;submit&quot;&#10;                    label=&quot;Submit&quot;&#10;                    icon=&quot;pi pi-check&quot;&#10;                    :loading=&quot;loading&quot;&#10;                    class=&quot;w-full bg-indigo-600 text-white&quot;&#10;                /&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Loading state --&gt;&#10;        &lt;div v-if=&quot;tableLoading&quot; class=&quot;mt-8 text-center&quot;&gt;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading submissions...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Empty state --&gt;&#10;        &lt;div v-else-if=&quot;submissions.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#10;            &lt;i class=&quot;pi pi-upload text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No submissions yet&lt;/h3&gt;&#10;            &lt;p class=&quot;mt-2 text-gray-500 max-w-sm mx-auto&quot;&gt;&#10;                Get started by submitting your first code for AI-powered review and feedback.&#10;            &lt;/p&gt;&#10;            &lt;div class=&quot;mt-6&quot;&gt;&#10;                &lt;StyledButton&#10;                    label=&quot;Submit Your First Code&quot;&#10;                    icon=&quot;plus&quot;&#10;                    @click=&quot;showDialog = true&quot;&#10;                    class=&quot;bg-indigo-600 hover:bg-indigo-700&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mt-4 text-sm text-gray-400&quot;&gt;&#10;                Or connect your GitHub repository for automatic pull request reviews&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Data table - only show when there are submissions --&gt;&#10;        &lt;DataTable&#10;            v-else&#10;            :value=&quot;submissions&quot;&#10;            class=&quot;mt-8&quot;&#10;            :paginator=&quot;true&quot;&#10;            :rows=&quot;10&quot;&#10;            :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;            :loading=&quot;tableLoading&quot;&#10;        &gt;&#10;            &lt;Column field=&quot;title&quot; header=&quot;Title&quot; sortable /&gt;&#10;            &lt;Column field=&quot;language&quot; header=&quot;Language&quot; sortable /&gt;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Submitted&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    {{ new Date(slotProps.data.created_at).toLocaleDateString() }}&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Reviews&quot;&#10;                            icon=&quot;pi pi-comments&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            @click=&quot;() =&gt; $router.push(`/reviews/${slotProps.data.id}`)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;Delete&quot;&#10;                            icon=&quot;pi pi-trash&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            severity=&quot;danger&quot;&#10;                            @click=&quot;() =&gt; deleteSubmission(slotProps.data.id)&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;        &lt;/DataTable&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { onMounted } from 'vue';&#10;import { useSubmissions } from '@/utils/composables/useSubmissions';&#10;import {useAuth} from &quot;@/utils/composables/useAuth&quot;;&#10;&#10;const {&#10;    // State&#10;    showDialog,&#10;    loading,&#10;    tableLoading,&#10;    form,&#10;    submissions,&#10;    repository,&#10;    languages,&#10;&#10;    // Methods&#10;    addSubmission,&#10;    deleteSubmission,&#10;    fetchSubmissions,&#10;    fetchRepository&#10;} = useSubmissions();&#10;&#10;const { checkAuth } = useAuth();&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;    await fetchRepository();&#10;    await fetchSubmissions();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;    &lt;MainLayout&gt;&#10;        &lt;PageHeader title=&quot;Code Submissions&quot; :subtitle=&quot;`Submit and review your code for ${repository?.name || 'Repository'}.`&quot; /&gt;&#10;&#10;        &lt;!-- Only show Add Submission button when there are submissions --&gt;&#10;        &lt;div v-if=&quot;submissions.length &gt; 0&quot; class=&quot;mt-10 flex justify-center&quot;&gt;&#10;            &lt;StyledButton label=&quot;Add Submission&quot; icon=&quot;plus&quot; @click=&quot;showDialog = true&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;Dialog v-model:visible=&quot;showDialog&quot; header=&quot;Add Code Submission&quot; modal class=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;form @submit.prevent=&quot;addSubmission&quot; class=&quot;space-y-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Title&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.title&quot; class=&quot;w-full&quot; placeholder=&quot;Submission Title&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Language&lt;/label&gt;&#10;                    &lt;Dropdown&#10;                        v-model=&quot;form.language&quot;&#10;                        :options=&quot;languages&quot;&#10;                        placeholder=&quot;Select Language&quot;&#10;                        class=&quot;w-full&quot;&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;Code&lt;/label&gt;&#10;                    &lt;Textarea v-model=&quot;form.code_content&quot; class=&quot;w-full&quot; rows=&quot;10&quot; placeholder=&quot;Paste your code here&quot; required /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                    &lt;label class=&quot;block text-sm font-medium text-gray-700&quot;&gt;File Path (Optional)&lt;/label&gt;&#10;                    &lt;InputText v-model=&quot;form.file_path&quot; class=&quot;w-full&quot; placeholder=&quot;/path/to/file&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button&#10;                    type=&quot;submit&quot;&#10;                    label=&quot;Submit&quot;&#10;                    icon=&quot;pi pi-check&quot;&#10;                    :loading=&quot;loading&quot;&#10;                    class=&quot;w-full bg-indigo-600 text-white&quot;&#10;                /&gt;&#10;            &lt;/form&gt;&#10;        &lt;/Dialog&gt;&#10;&#10;        &lt;!-- Loading state --&gt;&#10;        &lt;div v-if=&quot;tableLoading&quot; class=&quot;mt-8 text-center&quot;&gt;&#10;            &lt;i class=&quot;pi pi-spinner pi-spin text-2xl&quot;&gt;&lt;/i&gt;&#10;            &lt;p class=&quot;mt-2&quot;&gt;Loading submissions...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Empty state --&gt;&#10;        &lt;div v-else-if=&quot;submissions.length === 0&quot; class=&quot;mt-8 text-center py-12&quot;&gt;&#10;            &lt;i class=&quot;pi pi-upload text-6xl text-gray-300&quot;&gt;&lt;/i&gt;&#10;            &lt;h3 class=&quot;mt-4 text-lg font-medium text-gray-900&quot;&gt;No submissions yet&lt;/h3&gt;&#10;            &lt;p class=&quot;mt-2 text-gray-500 max-w-sm mx-auto&quot;&gt;&#10;                Get started by submitting your first code for AI-powered review and feedback.&#10;            &lt;/p&gt;&#10;            &lt;div class=&quot;mt-6&quot;&gt;&#10;                &lt;StyledButton&#10;                    label=&quot;Submit Your First Code&quot;&#10;                    icon=&quot;plus&quot;&#10;                    @click=&quot;showDialog = true&quot;&#10;                    class=&quot;bg-indigo-600 hover:bg-indigo-700&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;mt-4 text-sm text-gray-400&quot;&gt;&#10;                Or connect your GitHub repository for automatic pull request reviews&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Data table - only show when there are submissions --&gt;&#10;        &lt;DataTable&#10;            v-else&#10;            :value=&quot;submissions&quot;&#10;            class=&quot;mt-8&quot;&#10;            :paginator=&quot;true&quot;&#10;            :rows=&quot;10&quot;&#10;            :rowsPerPageOptions=&quot;[5, 10, 20]&quot;&#10;            :loading=&quot;tableLoading&quot;&#10;        &gt;&#10;            &lt;Column field=&quot;title&quot; header=&quot;Title&quot; sortable /&gt;&#10;            &lt;Column field=&quot;language&quot; header=&quot;Language&quot; sortable /&gt;&#10;            &lt;Column field=&quot;created_at&quot; header=&quot;Submitted&quot; sortable&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    {{ new Date(slotProps.data.created_at).toLocaleDateString() }}&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;            &lt;Column header=&quot;Actions&quot;&gt;&#10;                &lt;template #body=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex gap-2&quot;&gt;&#10;                        &lt;Button&#10;                            label=&quot;View Reviews&quot;&#10;                            icon=&quot;pi pi-comments&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            @click=&quot;() =&gt; $router.push(`/reviews/${slotProps.data.id}`)&quot;&#10;                        /&gt;&#10;                        &lt;Button&#10;                            label=&quot;Delete&quot;&#10;                            icon=&quot;pi pi-trash&quot;&#10;                            size=&quot;small&quot;&#10;                            text&#10;                            severity=&quot;danger&quot;&#10;                            @click=&quot;() =&gt; deleteSubmission(slotProps.data.id)&quot;&#10;                        /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/template&gt;&#10;            &lt;/Column&gt;&#10;        &lt;/DataTable&gt;&#10;    &lt;/MainLayout&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { onMounted } from 'vue';&#10;import { useSubmissions } from '@/utils/composables/useSubmissions';&#10;import {useAuth} from &quot;@/utils/composables/useAuth&quot;;&#10;&#10;const {&#10;    // State&#10;    showDialog,&#10;    loading,&#10;    tableLoading,&#10;    form,&#10;    submissions,&#10;    repository,&#10;    languages,&#10;&#10;    // Methods&#10;    addSubmission,&#10;    deleteSubmission,&#10;    fetchSubmissions,&#10;    fetchRepository&#10;} = useSubmissions();&#10;&#10;const { checkAuth } = useAuth();&#10;onMounted(async () =&gt; {&#10;    if (!checkAuth()) {&#10;        router.push('/auth/login1');&#10;        return;&#10;    }&#10;    await fetchRepository();&#10;    await fetchSubmissions();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;@import '@/assets/GlobalStyles.css';&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>